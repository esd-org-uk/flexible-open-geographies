@using System.Configuration
@model Esd.FlexibleOpenGeographies.Web.Models.AreaTypeAddModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Add area type";
    var permissionClass = "";
    if (ConfigurationManager.AppSettings["DisablePermissions"] == "true")
    {
        permissionClass = "hide";
    }
}
@section scripts
{
    <script type="text/javascript">
        var alternateLabelIndex = 0;

        function AddAlternateLabel() {
            var value = $('#AlternateLabels_0_').val();
            if (value == null || value == '') return;
            alternateLabelIndex++;
            var inputControl = $('<input/>', {
                'id': 'AlternateLabels_' + alternateLabelIndex.toString() + '_',
                'name': 'AlternateLabels[' + alternateLabelIndex.toString() + ']',
                'class': 'form-control input-sm',
                'type': 'text',
                'value': value
            });
            var removeButton = $('<button/>', {
                'class': 'btn btn-sm btn-link',
                'type': 'button',
                'onclick': 'RemoveAlternateLabel(' + alternateLabelIndex.toString() + ')'
            }).append($('<span/>', {
                'class': 'glyphicon glyphicon-minus-sign icon-red',
                'title': 'Remove'
            }));
            var html = $('<div/>', {
                'class': 'form-group',
                'id': 'alternate-label-group-' + alternateLabelIndex.toString()
            }).append($('<div/>', {
                'class': 'col-xs-offset-3 col-xs-3'
            }).append(inputControl)
            ).append($('<div/>', {
                'class': 'col-xs-1'
            }).append(removeButton)
            ).append($('<div/>', {
                'class': 'col-xs-5'
            }));
            $('#alternate-labels-group').append(html);
            $('#AlternateLabels_0_').val('');
        };

        function RemoveAlternateLabel(index) {
            var input = $('#AlternateLabels_' + index.toString() + '_');
            var group = $('#alternate-label-group-' + index.toString());
            input.val('');
            group.hide();
        };

        function CodeChanged() {
            $('#code-unique-message').empty();
            $("span[data-valmsg-for='Code']").empty();
            var code = $('#Code').val();
            $.get('@Url.RouteUrl("AreaTypeCodeError")', { code: code }, function (message) {
                if (message != null && message != '') {
                    CodeValid(false, message);
                    return;
                }
            });
            CodeValid(true, null);
        };

        function GroupChanged() {
            if ($('#IsGroup').prop('checked')) {
                $('#group-types').show();
                $('#non-group-types').hide();
            } else {
                $('#group-types').hide();
                $('#non-group-types').show();
            }
        };

        function CodeValid(isValid, message) {
            var control = $('#code-feedback');
            var parent = $('#code-group');
            var messageControl = $('#code-unique-message');
            var classToAdd = isValid ? 'glyphicon-ok' : 'glyphicon-remove';
            var classToRemove = isValid ? 'glyphicon-remove' : 'glyphicon-ok';
            var parentClassToAdd = isValid ? 'has-success' : 'has-error';
            var parentClassToRemove = isValid ? 'has-error' : 'has-success';
            if (control.hasClass(classToRemove)) control.removeClass(classToRemove);
            if (!control.hasClass(classToAdd)) control.addClass(classToAdd);
            if (parent.hasClass(parentClassToRemove)) parent.removeClass(parentClassToRemove);
            if (!parent.hasClass(parentClassToAdd)) parent.addClass(parentClassToAdd);
            messageControl.html(message);
        };
    </script>
}

<div class="alert alert-info alert-dismissable" role="alert">
    <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
    <p>
        <span class="glyphicon glyphicon-info-sign"></span> Create a custom area type. 
        To create a virtual area type which tick the <em>Is made up of other types</em> box. 
        This will create an area type where you cannot directly assign areas to it, 
        it will instead be a sum of all the area types it is made up of.
    </p>
    <p>
        If not made up of other types the <em>Parent area type(s)</em> and <em>Child area type(s)</em> determine the type hierarchy.
        For example if a country is made up of regions then country is the parent area type and region is the child area type.
    </p>
</div>

<div class="page-header"><h2>Add a new area type</h2></div>

@using (Html.BeginForm("Add", "AreaType", FormMethod.Post, new {@class = "form-horizontal", role = "form"}))
{
    <div>
        <div class="form-group row">
            @Html.LabelFor(m => m.IsGroup, new { @class = "col-xs-3 control-label" })
            <div class="col-xs-4">
                <input type="checkbox" id="IsGroup" onchange="GroupChanged();"/>
                <div class="help-block">If checked then this area type will be an aggregate of other specified types. You won't be able to explicitly add or remove areas from it.</div>
            </div>
        </div>
        <div id="code-group" class="form-group has-feedback">
            @Html.LabelFor(m => m.Code, new { @class = "col-xs-3 control-label" })
            <div class="col-xs-4">
                @Html.TextBoxFor(m => m.Code, new { @placeholder = "Code of area type", @autocomplete = "off", @class = "form-control input-sm", @onchange = "CodeChanged()" })
                <span id="code-feedback" class="glyphicon form-control-feedback"></span>
                <div class="help-block">Choose the code used to identify the area type. Leave blank to have one auto-generated.</div>
           </div>
            <div class="col-xs-5">
                <span id="code-unique-message" class="field-validation-error"></span>
                @Html.ValidationMessageFor(m => m.Code)
            </div>
        </div>
        @Html.Partial("_LabelControl", Model)
        <div id="alternate-labels-group">
            <div class="form-group">
                @Html.LabelFor(m => m.AlternateLabels, new { @class = "col-xs-3 control-label" })
                <div class="col-xs-3">
                    <input autocomplete="off" class="form-control input-sm" id="AlternateLabels_0_" name="AlternateLabels[0]" placeholder="Alternate name of area type" type="text" />
                </div>
                <div class="col-xs-1">
                    <button class="btn btn-sm btn-link" onclick="AddAlternateLabel();" type="button">
                        <span class="glyphicon glyphicon-ok-sign icon-green" title="Add"></span>
                    </button>
                </div>
                <div class="col-xs-5">
                    @Html.ValidationMessageFor(m => m.AlternateLabels)
                </div>
            </div>
        </div>
        <div id="group-types" style="display: none">
            <div class="form-group">
                @Html.LabelFor(m => m.GroupMembers, new { @class = "col-xs-3 control-label" })
                <div class="col-xs-3">
                    @Html.ListBoxFor(m => m.GroupMembers, new SelectList(Model.AreaTypes, "Code", "Label"), new { @class = "form-control input-sm" })
                    <div class="help-block">Hold CTRL and click to select multiple items</div>
                </div>
                <div class="col-xs-1">
                    <button class="btn btn-sm btn-link" role="button" type="button" onclick="$('#GroupMembers').attr('size',@Model.AreaTypes.Count());">
                        <span class="glyphicon glyphicon-resize-full" title="Maximize"></span>
                    </button>
                    <button class="btn btn-sm btn-link" role="button" type="button" onclick="$('#GroupMembers').attr('size', 3);">
                        <span class="glyphicon glyphicon-resize-small" title="Minimize"></span>
                    </button>
                </div>
                <div class="col-xs-5">
                    @Html.ValidationMessageFor(m => m.GroupMembers)
                </div>
            </div>
        </div>
        <div id="non-group-types">
            <div class="form-group">
                @Html.LabelFor(m => m.ParentTypes, new { @class = "col-xs-3 control-label" })
                <div class="col-xs-3">
                    @Html.ListBoxFor(m => m.ParentTypes, new SelectList(Model.AreaTypes, "Code", "Label"), new { @class = "form-control input-sm" })
                    <div class="help-block">Hold CTRL and click to select multiple items</div>
                </div>
                <div class="col-xs-1">
                    <button class="btn btn-sm btn-link" role="button" type="button" onclick="$('#ParentTypes').attr('size',@Model.AreaTypes.Count());">
                        <span class="glyphicon glyphicon-resize-full" title="Maximize"></span>
                    </button>
                    <button class="btn btn-sm btn-link" role="button" type="button" onclick="$('#ParentTypes').attr('size', 3);">
                        <span class="glyphicon glyphicon-resize-small" title="Minimize"></span>
                    </button>
                </div>
                <div class="col-xs-5">
                    @Html.ValidationMessageFor(m => m.ParentTypes)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ChildTypes, new { @class = "col-xs-3 control-label" })
                <div class="col-xs-3">
                    @Html.ListBoxFor(m => m.ChildTypes, new SelectList(Model.AreaTypes, "Code", "Label"), new { @class = "form-control input-sm" })
                    <div class="help-block">Hold CTRL and click to select multiple items</div>
                </div>
                <div class="col-xs-1">
                    <button class="btn btn-sm btn-link" role="button" type="button" onclick="$('#ChildTypes').attr('size',@Model.AreaTypes.Count());">
                        <span class="glyphicon glyphicon-resize-full" title="Maximize"></span>
                    </button>
                    <button class="btn btn-sm btn-link" role="button" type="button" onclick="$('#ChildTypes').attr('size',3);">
                        <span class="glyphicon glyphicon-resize-small" title="Minimize"></span>
                    </button>
                </div>
                <div class="col-xs-5">
                    @Html.ValidationMessageFor(m => m.ChildTypes)
                </div>
            </div>
        </div>
        <div class="form-group required @permissionClass">
            @Html.LabelFor(m => m.MetricUploadPermissionLevelId, new { @class = "col-xs-3 control-label" })
            <div class="col-xs-4">
                @Html.DropDownListFor(m => m.MetricUploadPermissionLevelId, new SelectList(Model.MetricUploadPermissionLevels, "Id", "Description"), new { @class = "form-control input-sm" })
            </div>
            <div class="col-xs-5">
                @Html.ValidationMessageFor(m => m.MetricUploadPermissionLevelId)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.SameAsLink, new { @class = "col-xs-3 control-label" })
            <div class="col-xs-4">
                @Html.TextBoxFor(m => m.SameAsLink, new { @placeholder = "SameAs external link", @autocomplete = "off", @class = "form-control input-sm" })
                <div class="help-block">A link to an external definition of this area. See <a href="http://www.w3.org/TR/owl-ref/#sameAs-def">owl:sameAs</a> for more information.</div>
            </div>
            <div class="col-xs-5">
                @Html.ValidationMessageFor(m => m.SameAsLink)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-offset-3 col-xs-9">
                <button type="submit" class="btn btn-primary">
                    <span class="glyphicon glyphicon-floppy-save"></span>
                    Create
                </button>
                <small>Fields marked with * are required</small>
            </div>
        </div> 
    </div>
}